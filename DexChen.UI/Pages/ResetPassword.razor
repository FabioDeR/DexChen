@page "/reset-password/{Token?}"
@inject NavigationManager NavigationManager

<div class="auth-container">
    <div class="auth-card">
        <img src="dexchenlogo.png" alt="DexChen Logo" class="auth-logo" />
        <h1 class="auth-title">Nouveau mot de passe</h1>

        @if (resetComplete)
        {
            <div class="success-message">
                <i class="fas fa-check-circle"></i>
                <div>
                    <h3>Mot de passe modifié !</h3>
                    <p>Votre mot de passe a été réinitialisé avec succès.</p>
                </div>
            </div>
            
            <button class="btn-primary" @onclick="GoToLogin">
                <span>Se connecter</span>
                <i class="fas fa-sign-in-alt"></i>
            </button>
        }
        else if (string.IsNullOrEmpty(Token))
        {
            <div class="auth-info error">
                <i class="fas fa-exclamation-triangle"></i>
                <p>Le lien de réinitialisation n'est pas valide. Veuillez demander un nouveau lien.</p>
            </div>
            
            <button class="btn-primary" @onclick="GoToForgotPassword">
                <span>Demander un nouveau lien</span>
                <i class="fas fa-redo"></i>
            </button>
        }
        else
        {
            <p class="auth-subtitle">Créez un nouveau mot de passe pour votre compte</p>

            <div class="form-group">
                <label for="password">Nouveau mot de passe</label>
                <div class="input-with-icon">
                    <i class="fas fa-lock"></i>
                    <input type="@(showPassword ? "text" : "password")" id="password" class="form-control" @bind="password" placeholder="••••••••" />
                    <button type="button" class="toggle-password" @onclick="TogglePasswordVisibility">
                        <i class="fas @(showPassword ? "fa-eye-slash" : "fa-eye")"></i>
                    </button>
                </div>
                <div class="password-strength @passwordStrengthClass">
                    <div class="strength-meter" title="@passwordFeedback"></div>
                    <span class="strength-text">@passwordFeedback</span>
                </div>
            </div>

            <div class="form-group">
                <label for="confirmPassword">Confirmer le mot de passe</label>
                <div class="input-with-icon">
                    <i class="fas fa-lock"></i>
                    <input type="@(showPassword ? "text" : "password")" id="confirmPassword" class="form-control" @bind="confirmPassword" placeholder="••••••••" />
                </div>
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="error-message">
                    @errorMessage
                </div>
            }

            <button class="btn-primary" @onclick="HandleResetPassword">
                <span>Réinitialiser le mot de passe</span>
                <i class="fas fa-key"></i>
            </button>
        }

        <div class="auth-links">
            <a href="/login" class="link-secondary">
                <i class="fas fa-arrow-left"></i>
                Retour à la connexion
            </a>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string? Token { get; set; }

    private string password = "";
    private string confirmPassword = "";
    private string errorMessage = "";
    private bool showPassword = false;
    private bool resetComplete = false;

    private string passwordStrengthClass => password.Length switch
    {
        0 => "",
        < 6 => "weak",
        < 10 => "medium",
        _ => "strong"
    };

    private string passwordFeedback => password.Length switch
    {
        0 => "",
        < 6 => "Mot de passe faible",
        < 10 => "Mot de passe moyen",
        _ => "Mot de passe fort"
    };

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    private async Task HandleResetPassword()
    {
        if (string.IsNullOrWhiteSpace(password))
        {
            errorMessage = "Veuillez entrer un mot de passe";
            return;
        }

        if (password.Length < 6)
        {
            errorMessage = "Le mot de passe doit contenir au moins 6 caractères";
            return;
        }

        if (password != confirmPassword)
        {
            errorMessage = "Les mots de passe ne correspondent pas";
            return;
        }

        try
        {
            // TODO: Implémentation réelle de la réinitialisation
            // Pour la démo, on simule un succès
            await Task.Delay(1000); // Simule un délai réseau
            resetComplete = true;
            errorMessage = "";
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private void GoToLogin()
    {
        NavigationManager.NavigateTo("/login");
    }

    private void GoToForgotPassword()
    {
        NavigationManager.NavigateTo("/forgot-password");
    }
} 