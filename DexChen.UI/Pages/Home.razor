@page "/"
@using Microsoft.AspNetCore.Components.Authorization
@using PokemonTcgSdk.Standard.Infrastructure.HttpClients.Cards
@using System.Timers
@implements IDisposable
@inject NavigationManager NavigationManager
@inject DexChen.UI.Services.Contract.ICardService CardService

<PageTitle>DexChen - Scanne. Estime. Collectionne.</PageTitle>

<div class="hero-section">
    <div class="hero-content">
        <AuthorizeView>
            <Authorized>
                <h1 class="hero-title">Re-bonjour, @context.User.Identity?.Name <span class="wave">👋</span></h1>
                <p class="hero-subtitle">Prêt à scanner une nouvelle carte? Découvre la valeur de ta collection en quelques clics.</p>
            </Authorized>
            <NotAuthorized>
                <h1 class="hero-title">Scanne. Estime. Collectionne.</h1>
                <p class="hero-subtitle">DexChen t'aide à identifier tes cartes Pokémon et à connaître leur valeur réelle sur le marché.</p>
            </NotAuthorized>
        </AuthorizeView>

        <div class="hero-buttons">
            <button class="btn-scan" @onclick="NavigateToScan">
                <i class="fas fa-qrcode"></i>
                Scanner une carte
            </button>
            <AuthorizeView>
                <NotAuthorized>
                    <button class="btn-secondary" @onclick="NavigateToLogin">
                        <i class="fas fa-sign-in-alt"></i>
                        Se connecter
                    </button>
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </div>
</div>

<div class="features-section">
    <div class="section-header">
        <h2>Comment ça marche</h2>
        <p>Notre processus en trois étapes simples</p>
    </div>
    <div class="features-grid">
        <div class="feature-card">
            <div class="feature-icon">
                <i class="fas fa-camera"></i>
            </div>
            <h3 class="feature-title">Scanner</h3>
            <p class="feature-description">Prends ta carte en photo et laisse DexChen faire le reste. Notre technologie reconnaît instantanément ta carte.</p>
        </div>
        <div class="feature-card">
            <div class="feature-icon">
                <i class="fas fa-magic"></i>
            </div>
            <h3 class="feature-title">Identification</h3>
            <p class="feature-description">DexChen détecte automatiquement ta carte, sa rareté et son édition grâce à notre IA avancée.</p>
        </div>
        <div class="feature-card">
            <div class="feature-icon">
                <i class="fas fa-chart-line"></i>
            </div>
            <h3 class="feature-title">Estimation</h3>
            <p class="feature-description">Récupère la valeur moyenne du marché et ajoute-la à ta collection. Suis l'évolution des prix.</p>
        </div>
    </div>
</div>

<div class="popular-cards" @onmouseover="PauseCarousel" @onmouseout="ResumeCarousel">
    <div class="section-header">
        <h2>Cartes populaires</h2>
        <p>Découvre les cartes les plus recherchées du moment</p>

        <div class="carousel-controls">
            <button class="prev-btn" @onclick="PreviousCard" disabled="@(CurrentIndex <= 0)">
                <i class="fas fa-chevron-left"></i>
            </button>
            <span class="pagination">@(CurrentIndex + 1) / @(FeaturedCards?.Count ?? 0)</span>
            <button class="next-btn" @onclick="NextCard" disabled="@(CurrentIndex >= (FeaturedCards?.Count - 1 ?? 0))">
                <i class="fas fa-chevron-right"></i>
            </button>
            <div class="carousel-auto-toggle">
                <input type="checkbox" id="autoplay" @bind="AutoPlayEnabled" />
                <label for="autoplay">Défilement automatique</label>
            </div>
        </div>
    </div>

    @if (IsLoading)
    {
        <div class="loading-container">
            <div class="spinner"></div>
            <p>Chargement des cartes Pokémon...</p>
        </div>
    }
    else if (FeaturedCards != null && FeaturedCards.Any())
    {
        <div class="carousel-container">
            @for (int i = 0; i < FeaturedCards.Count; i++)
            {
                var card = FeaturedCards[i];
                var activeClass = i == CurrentIndex ? "active" : "";

                <div class="card-preview @activeClass" style="transition: all 0.5s ease">
                    <span class="card-badge">@GetCardRarity(card)</span>
                    <img src="@card.Images?.Small" alt="@card.Name" loading="lazy" />
                    <div class="card-price">
                        <span class="price-value">@GetCardPrice(card)</span>
                        <span class="price-trend"><i class="@GetPriceTrendIcon(card)"></i> @GetPriceTrendPercentage(card)</span>
                    </div>
                </div>
            }
        </div>

        <div class="carousel-indicators">
            @for (int i = 0; i < FeaturedCards.Count; i++)
            {
                var isActive = i == CurrentIndex;
                var indicatorClass = isActive ? "indicator active" : "indicator";
                var currentIndex = i;  // Capture the value for the lambda

                <span class="@indicatorClass" @onclick="() => GoToSlide(currentIndex)"></span>
            }
        </div>
    }
    else
    {
        <div class="no-cards-message">
            <p>Aucune carte trouvée. Veuillez réessayer plus tard.</p>
        </div>
    }
</div>

@code {
    private List<Card> FeaturedCards { get; set; }
    private bool IsLoading { get; set; } = true;
    private Random Random = new Random();
    private int CurrentIndex { get; set; } = 0;
    private Timer _carouselTimer;
    private bool AutoPlayEnabled { get; set; } = true;
    private bool IsPaused { get; set; } = false;
    private const int CarouselInterval = 5000; // 5 secondes entre chaque changement de carte

    protected override async Task OnInitializedAsync()
    {
        await LoadFeaturedCards();

        // Initialise le timer après le chargement des cartes
        InitializeCarouselTimer();
    }

    private void InitializeCarouselTimer()
    {
        _carouselTimer = new Timer(CarouselInterval);
        _carouselTimer.Elapsed += (sender, args) =>
        {
            // Cette méthode s'exécute sur un thread différent, nous devons appeler InvokeAsync
            InvokeAsync(() =>
            {
                if (AutoPlayEnabled && !IsPaused && FeaturedCards?.Count > 0)
                {
                    CurrentIndex = (CurrentIndex + 1) % FeaturedCards.Count;
                    StateHasChanged();
                }
            });
        };
        _carouselTimer.AutoReset = true;
        _carouselTimer.Enabled = AutoPlayEnabled;
    }

    private void NextCard()
    {
        if (FeaturedCards != null && CurrentIndex < FeaturedCards.Count - 1)
        {
            CurrentIndex++;
            ResetCarouselTimer();
            StateHasChanged();
        }
        else if (FeaturedCards != null && FeaturedCards.Count > 0)
        {
            // Revenir au début si on est à la fin
            CurrentIndex = 0;
            ResetCarouselTimer();
            StateHasChanged();
        }
    }

    private void PreviousCard()
    {
        if (CurrentIndex > 0)
        {
            CurrentIndex--;
            ResetCarouselTimer();
            StateHasChanged();
        }
        else if (FeaturedCards != null && FeaturedCards.Count > 0)
        {
            // Aller à la fin si on est au début
            CurrentIndex = FeaturedCards.Count - 1;
            ResetCarouselTimer();
            StateHasChanged();
        }
    }

    private void GoToSlide(int index)
    {
        if (FeaturedCards != null && index >= 0 && index < FeaturedCards.Count)
        {
            CurrentIndex = index;
            ResetCarouselTimer();
            StateHasChanged();
        }
    }

    private void PauseCarousel()
    {
        IsPaused = true;
    }

    private void ResumeCarousel()
    {
        IsPaused = false;
    }

    private void ResetCarouselTimer()
    {
        if (_carouselTimer != null)
        {
            _carouselTimer.Stop();
            _carouselTimer.Start();
        }
    }

    public void Dispose()
    {
        _carouselTimer?.Dispose();
    }

    private async Task LoadFeaturedCards()
    {
        try
        {
            IsLoading = true;
            FeaturedCards = await CardService.GetFeaturedCardsAsync(5); // Augmenter le nombre pour un meilleur effet carousel
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Erreur lors du chargement des cartes: {ex.Message}");
            FeaturedCards = new List<Card>();
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private string GetCardRarity(Card card)
    {
        if (string.IsNullOrEmpty(card.Rarity))
            return "Standard";

        return card.Rarity switch
        {
            var r when r.Contains("Ultra") => "Ultra-rare",
            var r when r.Contains("Holo") => "Holo",
            var r when r.Contains("Rare") => "Rare",
            _ => "Standard"
        };
    }

    private string GetCardPrice(Card card)
    {
        // Afficher le prix réel si disponible dans TCGPlayer ou CardMarket
        if (card.Tcgplayer?.Prices != null)
        {
            var holofoil = card.Tcgplayer.Prices.Holofoil?.Market;
            var reverseHolofoil = card.Tcgplayer.Prices.ReverseHolofoil?.Market;
            var normal = card.Tcgplayer.Prices.Normal?.Market;

            var price = holofoil ?? reverseHolofoil ?? normal;
            if (price.HasValue)
                return $"€{price.Value:F2}";
        }

        if (card.Cardmarket?.Prices != null)
        {
            var trendPrice = card.Cardmarket.Prices.TrendPrice;
            var avgSellPrice = card.Cardmarket.Prices.AverageSellPrice;

            var price = trendPrice ?? avgSellPrice;
            if (price.HasValue)
                return $"€{price.Value:F2}";
        }

        // Générer un prix simulé basé sur la rareté si aucun prix réel n'est disponible
        var basePriceByRarity = GetCardRarity(card) switch
        {
            "Ultra-rare" => Random.Next(800, 1500),
            "Holo" => Random.Next(300, 800),
            "Rare" => Random.Next(100, 300),
            _ => Random.Next(10, 100)
        };

        return $"€{basePriceByRarity}";
    }

    private string GetPriceTrendIcon(Card card)
    {
        // Si les données de prix ne sont pas disponibles, générer aléatoirement
        return Random.Next(0, 10) > 3 ? "fas fa-arrow-up" : "fas fa-arrow-down";
    }

    private string GetPriceTrendPercentage(Card card)
    {
        // Si les données de prix ne sont pas disponibles, générer aléatoirement
        return $"{Random.Next(1, 15)}%";
    }

    private void NavigateToScan()
    {
        NavigationManager.NavigateTo("/scan");
    }

    private void NavigateToLogin()
    {
        NavigationManager.NavigateTo("/login");
    }
}